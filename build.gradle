// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        compose_version = '1.1.0-beta01'
        compose_ui_version = '1.1.1'
    }
    repositories {
        google()
//        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.7.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.0"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.55'
        classpath "org.jetbrains.kotlin:kotlin-serialization:2.1.0"
        classpath "com.klaxit.hiddensecrets:HiddenSecretsPlugin:0.2.1"
    }
}

plugins {
    id("org.jlleitschuh.gradle.ktlint") version "10.3.0"
    id 'org.jetbrains.kotlin.jvm' version '2.1.0' apply false
    id 'org.jetbrains.kotlin.android' version '2.1.0' apply false
//    id 'com.android.library' version '7.2.2' apply false
    alias(libs.plugins.compose.compiler) apply false
    id 'com.google.devtools.ksp' version '2.1.0-1.0.29' apply false
}

allprojects {
    repositories {
        google()
//        mavenLocal()
        mavenCentral()

    }
}

/**
 * Unit test setup, pay attention!
 */
gradle.projectsEvaluated {
    rootProject.tasks.register("allUnitTests")

    def flavorCombo = ""
    rootProject.subprojects.findAll {
        def flavoredAndroidProjects = it.path.startsWith(":screens") && it.path != (":screens") && it.path != (":screens-compose") && it.path != (":screens-compose:entrypoint")
        flavoredAndroidProjects
    }.forEach {
        def name = it.name
        rootProject.tasks.getByName("allUnitTests").dependsOn("${it.path}:test${name.capitalize()}MockDebugUnitTest")
        flavorCombo += "${name.capitalize()}Mock"
    }

    rootProject.subprojects.findAll { it.path == ":screens-compose:entrypoint" }
            .forEach {
                rootProject.tasks.getByName("allUnitTests").dependsOn("${it.path}:test${flavorCombo}DebugUnitTest")
            }

    rootProject.subprojects.findAll { it.path.startsWith(":common-") && (it.path.endsWith("-android") || it.path.endsWith("-compose")) }
            .forEach {
                rootProject.tasks.getByName("allUnitTests").dependsOn("${it.path}:testDebugUnitTest")
            }

    plugins.withId('java-library') {
        rootProject.tasks.getByName("allUnitTests").dependsOn("${it.path}:test")
    }
}

subprojects {
    apply plugin: "org.jlleitschuh.gradle.ktlint"

//    apply plugin: 'kotlin-kapt'
    apply plugin: 'com.google.devtools.ksp'


    afterEvaluate {

        plugins.withId('com.android.application') {
//            project.apply plugin: 'kotlin-kapt'
            project.apply plugin: 'dagger.hilt.android.plugin'

            rootProject.subprojects.findAll {
                def screens = it.path.startsWith(":screens") && it.path != (":screens") && it.path != (":screens-compose") && it.path != ':screens-compose:entrypoint'
                screens
            }.forEach {
                def name = it.name
                println("writing flavor strategies for $name")

                android {
                    namespace "com.pratclot"

                    flavorDimensions.add("${name}Data".toString())

                    productFlavors {
                        "${name}Mock" {
                            dimension "${name}Data"
                        }
                        "${name}Live" {
                            dimension "${name}Data"
                        }
                    }
                    buildTypes {
                        debugMinify {
                            initWith debug
                            applicationIdSuffix ".debugMinify"
                            minifyEnabled true
                            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                        }
                    }
                }
            }

            project.dependencies {

                implementation project(path: ':screens-compose:entrypoint')

                implementation "com.google.dagger:hilt-android:2.55"
                ksp "com.google.dagger:hilt-compiler:2.55"

                testImplementation 'androidx.test.ext:junit-ktx:1.1.3'

                debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.9.1'
            }
        }

        plugins.withId('com.android.library') {
//            project.apply plugin: 'kotlin-kapt'
            project.apply plugin: 'dagger.hilt.android.plugin'
            project.apply plugin: libs.plugins.compose.compiler.get().getPluginId()

            if (project.path == ':common-android') {
                project.apply plugin: 'com.klaxit.hiddensecrets'

                project.android {
                    buildFeatures {
                        buildConfig true
                    }
                    externalNativeBuild {
                        cmake {
                            path "src/main/cpp/CMakeLists.txt"
                        }
                    }
                }
            }

            if (project.path == ':screens-compose:entrypoint') {
                rootProject.subprojects.findAll {
                    def screens = it.path.startsWith(":screens") && it.path != (":screens") && it.path != (":screens-compose") && it.path != ':screens-compose:entrypoint'
                    screens
                }.forEach {
                    def name = it.name
                    println("writing flavor strategies for $name")

                    android {
                        flavorDimensions.add("${name}Data".toString())

                        productFlavors {
                            "${name}Mock" {
                                dimension "${name}Data"
                            }
                            "${name}Live" {
                                dimension "${name}Data"
                            }
                        }
                    }
                }
            }

            if (project.path.startsWith(":screens") && project.path != ':screens-compose:entrypoint') {

                def name = project.name

                android {
                    flavorDimensions "${name}Data"

                    productFlavors {
                        "${name}Mock" {
                            dimension "${name}Data"
                        }
                        "${name}Live" {
                            dimension "${name}Data"
                        }
                    }
                }

                dependencies {
                    "implementation"(project(path: ":usecase:${name}"))
                }
            }

            if (project.path.startsWith(":screens-compose:")) {
                android {
                    buildFeatures {
                        compose true
                    }
                    composeOptions {
                        kotlinCompilerExtensionVersion '1.3.0'
                    }
                }
            }

            project.dependencies {

                if (project.path.startsWith(":screens-compose:entrypoint")) {

                    implementation project(path: ':screens:news')
                    implementation project(path: ':screens-compose:steamstore')
                    implementation project(path: ':screens-compose:themoviedb')

                    def nav_version = "2.5.1"
                    implementation "androidx.navigation:navigation-compose:$nav_version"
                }

                if (project.path.startsWith(":screens-compose:")) {
                    implementation project(path: ':common-compose')
                }
                if (project.path.startsWith(":screens:")) {
                }
                if (project.path.startsWith(":screens")) {
                    implementation project(path: ':common-android')
                    implementation project(path: ':domain')

                    testImplementation(project(':common-test-android'))
                }
                implementation project(path: ':common-kotlin')

                implementation "com.google.dagger:hilt-android:2.55"
                ksp "com.google.dagger:hilt-compiler:2.55"

                implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'
                implementation 'androidx.activity:activity-ktx:1.5.1'

                // For instrumented tests.
                androidTestImplementation 'com.google.dagger:hilt-android-testing:2.38.1'
                // ...with Kotlin.
                kspAndroidTest 'com.google.dagger:hilt-android-compiler:2.38.1'

                implementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'

                androidTestImplementation('androidx.test.uiautomator:uiautomator:2.2.0')

                testImplementation 'androidx.test.ext:junit-ktx:1.1.3'

            }

            project.android {
//                namespace "com.pratclot"

                defaultConfig {
                    // Replace com.example.android.dagger with your class path.
                    testInstrumentationRunner "com.pratclot.CustomTestRunner"
                }
                testOptions {
                    animationsDisabled true
                }
                buildTypes {
                    debugMinify {
                        initWith debug
                        minifyEnabled true
                        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    }
                }
            }

// Debugging Compose: https://chris.banes.dev/composable-metrics/
            tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                kotlinOptions {
                    if (project.findProperty("myapp.enableComposeCompilerReports") == "true") {
                        freeCompilerArgs += [
                                "-P",
                                "plugin:androidx.compose.compiler.plugins.kotlin:reportsDestination=" +
                                        project.buildDir.absolutePath + "/compose_metrics"
                        ]
                        freeCompilerArgs += [
                                "-P",
                                "plugin:androidx.compose.compiler.plugins.kotlin:metricsDestination=" +
                                        project.buildDir.absolutePath + "/compose_metrics"
                        ]
                    }
                }
            }
        }

        plugins.withId('java-library') {
//            project.apply plugin: 'kotlin-kapt'
            project.apply plugin: 'org.jetbrains.kotlin.jvm'
            project.apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

            if (project.path.startsWith(":api-") && project.path != ':api-common' && project.path != ':api-live:common') {
                dependencies {
                    implementation project(path: ':dto')
                    implementation project(path: ':api-common')
                }
            }

            if (project.path == ':api-live:common') {
                dependencies {
                    api('com.squareup.retrofit2:retrofit:2.9.0')
                    api("com.squareup.okhttp3:logging-interceptor:4.10.0")
                    api("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:0.8.0")
                }
            }

            if (project.path.startsWith(":api-live") && project.path != ':api-live:common') {
                dependencies {
                    implementation project(path: ':api-live:common')
                }
            }

            if (project.path == (":api-common")) {
                dependencies {
                    implementation project(path: ':dto')
                }
            }

            if (project.path.startsWith(":repository:")) {
                dependencies {
                    implementation project(path: ':domain')
                    implementation project(path: ':dto')
                    implementation project(path: ':api-common')
                }

                rootProject.subprojects.findAll {
                    def screens = it.path.startsWith(":screens") && it.path != (":screens") && it.path != (":screens-compose") && it.path != ':screens-compose:entrypoint'
                    screens
                }.forEach {
                    def name = it.name

                    dependencies {
                        try {
                            "implementation"(project(path: ":api-mock:${name}"))
                        } catch (UnknownProjectException ex) {
                            println ":api-mock:${name} was not included"
                        }
                        try {
                            "implementation"(project(path: ":api-live:${name}"))
                        } catch (UnknownProjectException ex) {
                            println ":api-live:${name} was not included"
                        }
                    }
                }
            }

            if (project.path.startsWith(":usecase:")) {
                def projectName = project.name
                dependencies {
                    implementation project(path: ':domain')
                }

                rootProject.subprojects.findAll {
                    def screens = it.path.startsWith(":screens") && it.path != (":screens") && it.path != (":screens-compose") && it.path != ':screens-compose:entrypoint'
                    screens
                }.forEach {
                    def name = it.name

                    dependencies {
                        "implementation"(project(path: ":repository:${name}"))
                    }
                }
            }
            project.dependencies {

                if (project.name != "common-kotlin") {
                    implementation project(path: ':common-kotlin')
                }


                implementation("com.google.dagger:hilt-core:2.55")
                ksp "com.google.dagger:hilt-compiler:2.55"
                implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
            }
        }
    }

    task allDeps(type: DependencyReportTask) { dependsOn 'dependencies' }

}


task clean(type: Delete) {
    delete rootProject.buildDir
}
